import{_ as i,I as e,c as l,o as n,ah as a,j as r,J as h,w as p,a as d}from"./chunks/framework.5RKWivQp.js";const f=JSON.parse('{"title":"React 中如何分组件","description":"","frontmatter":{},"headers":[],"relativePath":"posts/最佳实践/React中如何分组件.md","filePath":"posts/最佳实践/React中如何分组件.md"}'),o={name:"posts/最佳实践/React中如何分组件.md"};function k(c,s,g,E,b,u){const t=e("font");return n(),l("div",null,[s[1]||(s[1]=a('<h1 id="react-中如何分组件" tabindex="-1">React 中如何分组件 <a class="header-anchor" href="#react-中如何分组件" aria-label="Permalink to “React 中如何分组件”">​</a></h1><blockquote><p>基于自己工作中的体会，还有在做的过程中翻阅的资料，看的资料没有收藏起来，很想指出具体的出处，但是很多都是从各个地方看到的。不过都是在掘金、公众号前端开发、还有知乎上看到的。</p></blockquote><h2 id="😫-前言" tabindex="-1">😫 前言 <a class="header-anchor" href="#😫-前言" aria-label="Permalink to “😫 前言”">​</a></h2><p>随着 web 业务越来越复杂，一个页面必须要分成多个部分才能使得代码逻辑更加的清晰，出了问题也能更加快速的定位。所以说如果分组件的重要性不言而喻。</p><h2 id="一、基本原则" tabindex="-1">一、基本原则 <a class="header-anchor" href="#一、基本原则" aria-label="Permalink to “一、基本原则”">​</a></h2><ul><li><strong>每个组件不能超过 300 行</strong>。网上看好多人都说是 200 行，但是那样实际操作的话，压力会很大的，导致很多时候会为了分组件而分组件。其实分组件的目的就是为了可读性和可维护性。为了分组件而分组件的话，很多时候写的会很散很乱，违背了分组件的原则 \b。</li><li><strong>一切都是为了可读性和可维护性</strong></li><li>组件有两种类型：<strong>一种是有状态的，一种是无状态的</strong></li><li>从不同纬度考虑的话，可以分为四种：<strong>逻辑组件（智能组件）、UI 组件（木偶组件）</strong>、路由组件、状态组件（当前工作环境等常量）</li><li><strong>业务代码的复用高于代码的复用</strong></li><li>公共组件可以有自己的方法，但是数据的展示依旧是拿 props。<strong>一定要在跨页面使用的情况下才放在主目录的 componets 中</strong></li></ul>',6)),r("blockquote",null,[h(t,{style:{color:"#333333"}},{default:p(()=>s[0]||(s[0]=[d("无论是 Vue、augular 还是 React 提倡的基于数据驱动的设计理念——程序定义好 Model 和 View 的关系，剩下的业余处理只需要关心数据变化，View 的变化由框架自动执行，无需像 jquery 时代再去手动操作 DOM。",-1)])),_:1,__:[0]})]),s[2]||(s[2]=a(`<table tabindex="0"><thead><tr><th>展示组件</th><th>容器组件</th></tr></thead><tbody><tr><td>关注事物的展示</td><td>关注事物如何工作</td></tr><tr><td>可能包含展示和容器组件，并且一般会有 DOM 标签和 css 样式</td><td>可能包含展示和容器组件，并且不会有 DOM 标签和 css 样式</td></tr><tr><td>常常允许通过 this.props.children 传递</td><td>提供数据和行为给容器组件或者展示组件</td></tr><tr><td>对第三方没有任何依赖，比如 store 或者 flux action</td><td>调用 flux action 并且提供他们的回调给展示组件</td></tr><tr><td>不要指定数据如何加载和变化</td><td>作为数据源，通常采用较高阶的组件，而不是自己写，比如 React Redux 的 connect(), Relay 的 createContainer(), Flux Utils 的 Container.create()</td></tr><tr><td>仅通过属性获取数据和回调</td><td></td></tr><tr><td>很少有自己的状态，即使有，也是自己的 UI 状态</td><td></td></tr><tr><td>除非他们需要的自己的状态，生命周期，或性能优化才会被写为功能组件</td><td></td></tr></tbody></table><h2 id="二、组件实例-反面例子" tabindex="-1">二、组件实例（反面例子） <a class="header-anchor" href="#二、组件实例-反面例子" aria-label="Permalink to “二、组件实例（反面例子）”">​</a></h2><h3 id="_1-分享组件" tabindex="-1">1. 分享组件 <a class="header-anchor" href="#_1-分享组件" aria-label="Permalink to “1. 分享组件”">​</a></h3><p>功能：一个弹框，弹出需要分享的类型、有微信好友、朋友圈、链接微信好友、短信、还有海报生产的路由带参跳转。</p><p>变量：按钮的类型、分享出去封面的样式、分享出现带的参数（h5 和小程序由于历史原因还是有一些不同的）</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/654315/1598714815713-1236debd-6c03-45d9-8b84-4ebc94a046c2.png" alt=""></p><p>文件结果还是很乱的，这是由于本来最外层只有一个 index.js，随着开发发现要判断的东西越来越多，所以把他逻辑都拆分了。</p><ul><li>assets: 常量、参数的封装、工具库</li><li>images: 图片库</li><li>renders: 业务组件夹，三种分享类型的不同的封面样式和一个分享标题的组件</li><li>styles: 样式库</li><li>Contianer: 容器组件，把组件的三个部分的组件都包含在外 <ul><li>ButtonMain</li><li>CoverView</li><li>TitleVIew</li></ul></li><li>index.js: 逻辑组件，所有逻辑的操作都在这里，参数的封装太多分离到了 assets 中</li><li>ShareWechat: 封装的原生微信 SDK 分享</li></ul><p><strong>容器组件：</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/654315/1598715361734-9c8c5a97-26e7-4b4c-b0d1-b3e90ca8d78e.png" alt=""></p><p><strong>逻辑组件（智能组件）</strong>:</p><p><img src="https://cdn.nlark.com/yuque/0/2020/png/654315/1598715567256-1e69d9fd-1f6b-42fd-ab83-db33cc0e6faf.png" alt=""></p><p>通过容器组件爆出的 props 来进行控制容器组件的逻辑。</p><h3 id="_2-页面组件" tabindex="-1">2. 页面组件 <a class="header-anchor" href="#_2-页面组件" aria-label="Permalink to “2. 页面组件”">​</a></h3><p><img src="https://cdn.nlark.com/yuque/0/2020/png/654315/1598715672704-f98b40f9-ea83-4471-984c-07d672fa9dd8.png" alt=""></p><ul><li>index: 主页功能</li><li>pages：该房地产功能的其他页面</li><li>componet: 该功能的公共组件</li><li>renders: 主页的业务组件，由于主页内容太多分离出去的</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2020/png/654315/1598716061847-99777b5f-c6ed-4e88-89b8-c89168fcff68.png" alt=""></p><p>即使分离来页面的各个功能，但是单单是这样引入依旧够多且长的。本来这个是我想要再分离出去。但是一想到要 props 这么多参数，反而影响来可读性。所以这个组件超过来 500 行代码。<strong>写代码的时候，不管碰到了什么问题，如果影响到了可读性，而自己会一时半会没想到怎么解决，或事件来不及的时候。永远要选择可读性。</strong></p><h3 id="_3-对于组件中方法的复用。" tabindex="-1">3. 对于组件中方法的复用。 <a class="header-anchor" href="#_3-对于组件中方法的复用。" aria-label="Permalink to “3. 对于组件中方法的复用。”">​</a></h3><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">shareModule</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.shareModuleHandle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ref)} /&gt;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.shareModuleHandle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">manHdele</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p><strong>通过 ref 就可以暴露出组件中的方法来给予别的组件进行使用。</strong></p><hr><h2 id="三、其他心得" tabindex="-1">三、其他心得 <a class="header-anchor" href="#三、其他心得" aria-label="Permalink to “三、其他心得”">​</a></h2><p>之前我一直认为 代码的重复是罪恶的，是让人唾弃的！ 但是看了知乎这篇文章，我发现我好像偏离的轨道，代码的封装是为了代码更容易的去维护。有一种幡然醒悟的感觉。醍醐灌顶一般！</p><p><a href="https://www.zhihu.com/question/397593209/answer/1257454291" target="_blank" rel="noreferrer">前端写代码真的有必要封装太好么? - 知乎</a></p><p>觉得很好的两个问题：</p><ol><li>人的精力是有限的，多考虑大的价值。<br> 我现在在面对这么封装，是否应该封装的过程中，耗费的时间确实不少，这样是否是对的呢？肯定不是坏的，但是是否是现阶段最有意义的呢？</li><li>你现在写的代码，不管公司怎么样，只要你还在写，那么你就要对自己写的代码负责。“你写的项目，你做的项目很有可能在下一个季度交给另外一个人维护，我希望接受代码的人不会在背后骂你”，多想想你未封装的代码会对他人维护带来困扰吗？</li></ol>`,27))])}const y=i(o,[["render",k]]);export{f as __pageData,y as default};
