import{_ as e,c as t,o as r,b0 as _}from"./chunks/framework.Cbk70Z0j.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"documents/JavaScriptCore/作用域（链）、执行上下文、闭包.md","filePath":"documents/JavaScriptCore/作用域（链）、执行上下文、闭包.md"}'),i={name:"documents/JavaScriptCore/作用域（链）、执行上下文、闭包.md"};function l(o,a,n,s,c,d){return r(),t("div",null,a[0]||(a[0]=[_('<ul><li>{} == {} 不需要使用内存管理那一套来作为理解。它就是一个语法规范，内存管理是引擎的实现细节。规范就是这么规定的，如何实现就是另外一个问题，不需要用什么基础数据类型存在栈内存中，引用类型存储在内存中来理解。只要规范可以让 {} == {} 为 true，在现在的内存管理的基础上面一样可以让它成立。</li><li>我们平时的工作时候，基本的算法的涉及不到，更加不用说JS 引擎的实现了，所以当我们在讨论基础类型是储存在栈内存或者引用类型存储在堆内存的时候，其实的不出什么结果的。 什么样的工作需要深入了解呢？ts39部门，制定JS 规范的那些人。</li><li><blockquote><p>可以说高级脚本语言(shell那类除外）就没有真正意义上的基本数据类型(比如Java中的int之类)，因为如果定义了基本数据类型，那么引用数据类型就没办法复制给基本数据类型了(内存中长度不一样，操作方式也没法一样)。</p></blockquote></li><li>当我们在谈论局部变量和执行上下文的时候，执行上下文是包括局部变量的。</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to “参考资料”">​</a></h2><h2 id="作用域、作用域链、以及执行上下文的关系" tabindex="-1">作用域、作用域链、以及执行上下文的关系 <a class="header-anchor" href="#作用域、作用域链、以及执行上下文的关系" aria-label="Permalink to “作用域、作用域链、以及执行上下文的关系”">​</a></h2><h2 id="再次理解闭包" tabindex="-1">[[再次理解闭包]] <a class="header-anchor" href="#再次理解闭包" aria-label="Permalink to “[[再次理解闭包]]”">​</a></h2>',4)]))}const m=e(i,[["render",l]]);export{p as __pageData,m as default};
