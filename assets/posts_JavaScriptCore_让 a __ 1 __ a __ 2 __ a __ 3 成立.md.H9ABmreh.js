import{_ as i,c as a,o as n,be as t}from"./chunks/framework.Bc3g4bdh.js";const g=JSON.parse('{"title":"让 a == 1 && a == 2 && a == 3 成立","description":"对象","frontmatter":{"author":"橘子哥","createTime":"2022-01-13 11:59","modificationDate":"星期四 13日 一月 2022 12:03:49","description":"对象","category":"Web","smallClass":"JavaScript","key":"artitle"},"headers":[],"relativePath":"posts/JavaScriptCore/让 a == 1 && a == 2 && a == 3 成立.md","filePath":"posts/JavaScriptCore/让 a == 1 && a == 2 && a == 3 成立.md"}'),p={name:"posts/JavaScriptCore/让 a == 1 && a == 2 && a == 3 成立.md"};function l(h,s,e,k,r,E){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="让-a-1-a-2-a-3-成立" tabindex="-1">让 a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3 成立 <a class="header-anchor" href="#让-a-1-a-2-a-3-成立" aria-label="Permalink to “让 a == 1 &amp;&amp; a == 2 &amp;&amp; a == 3 成立”">​</a></h1><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Win&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如何打印除<code>Win</code></p><p>看到题目的第一眼,我是蒙蔽的.怎么可能会有如此矛盾的情况发生呢?就相当于一个人怎么可能即是小孩,又是成年人,还是老年人呢?</p><p>冷静下来,发现一些端倪.它并不是让 a 同时等于 1 2 3, 而且 js 是单线程运行的. 及时它们写在了一行,那也是从左到右执行的. 所以它们可以不是同一时期的东西.既然不是同一时期的东西,那么一个人当然可以是过小孩子,是过成年人,是过老年人了.</p><p>回到题目,那么我想要让这个条件成立,就需要 a 判断一次,就变化一次.</p><ol><li><p>第一种方法,利用判断过程中的<a href="https://www.wolai.com/dTBSZGyCzvqZGSk3TLXsvw" target="_blank" rel="noreferrer">隐式转换</a>的<code>toString</code>方法</p><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  _a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>运行一次,就给_a 加 1,然后返回.</p><p>因为 toString 是<code>Object.prototype</code>上面默认的方法,所以这个办法相当于把正常的<a href="https://www.wolai.com/dTBSZGyCzvqZGSk3TLXsvw" target="_blank" rel="noreferrer">隐式转换</a>中<code>toString</code> 方法给拦截了.</p><p>问题是可以解决了,但是带来了新的问题.如果题目把双等变成三个等怎么办.这里的 toString 已经默认把对象转化为字符串了.使用<code>toStirng</code>的话,结果就不成立了.</p></li><li><p>第二种方法,对象的数据拦截法</p><div class="language-JavaScript"><button title="Copy Code" class="copy"></button><span class="lang">JavaScript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defineProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  _a: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    writable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>对象的访问器相关内容可以查看<a href="https://www.wolai.com/gHrKSm75derryDEym74Rr3" target="_blank" rel="noreferrer">对于 JavaScript 面向对象的思考</a></p></li></ol>`,7)]))}const c=i(p,[["render",l]]);export{g as __pageData,c as default};
