import{_ as l,I as h,c as p,o as e,be as a,j as s,J as k,w as E,a as r,t as d}from"./chunks/framework.ohYmeG42.js";const f=JSON.parse('{"title":"Vapor","description":"","frontmatter":{},"headers":[],"relativePath":"posts/Vue/vapor.md","filePath":"posts/Vue/vapor.md"}'),g={name:"posts/Vue/vapor.md"},o={class:"info custom-block"},c={tabindex:"0"};function y(n,i,F,u,b,C){const t=h("font");return e(),p("div",null,[i[7]||(i[7]=a(`<h1 id="vapor" tabindex="-1">Vapor <a class="header-anchor" href="#vapor" aria-label="Permalink to “Vapor”">​</a></h1><h2 id="性能提升测试" tabindex="-1">性能提升测试 <a class="header-anchor" href="#性能提升测试" aria-label="Permalink to “性能提升测试”">​</a></h2><table tabindex="0"><thead><tr><th></th><th>首屏加载速度</th><th>更新耗时</th><th>更新内存使用</th></tr></thead><tbody><tr><td>traditional Mode</td><td><strong>1.82s 到 2.28s</strong></td><td>143ms</td><td>180 mb</td></tr><tr><td>Vapor Mode</td><td><strong>1.72s 到 2s</strong></td><td>25ms</td><td>144 mb</td></tr></tbody></table><h3 id="测试方法" tabindex="-1">测试方法 <a class="header-anchor" href="#测试方法" aria-label="Permalink to “测试方法”">​</a></h3><p>浏览器：Chorme 版本 135 隐私模式</p><p>创建项目，把 <code>vite-plugin-vue-devtools</code>插件删除。删除默认的.vue 文件，删除样式文件。</p><p>template 核心代码如下：</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;flat-form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;div v-for=&quot;item in formData&quot; :key=&quot;item.id&quot; class=&quot;flat-form-item&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;input type=&quot;text&quot; v-model=&quot;item.name&quot; placeholder=&quot;Name&quot; /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;input type=&quot;email&quot; v-model=&quot;item.email&quot; placeholder=&quot;Email&quot; /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;input</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      type=&quot;number&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      v-model=&quot;item.age&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      min=&quot;18&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      max=&quot;120&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      placeholder=&quot;Age&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;label class=&quot;active-label&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;input type=&quot;checkbox&quot; v-model=&quot;item.active&quot; /&gt; Active</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/label&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>数据生成逻辑如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateTestData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  formData.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ length: totalItems }, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id: i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`User \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    email: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`user\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}@example.com\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    age: Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    active: i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 确保正好一半数据的active为true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  isLoading.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>active 确保正好一半数据的 active 为 true，是为了测试数据更新的时候数据变量的量样本一致。</p><p>更新数据的关键代码如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fixedUpdateCount</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">formData.value.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fixedUpdateCount) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    item.active </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">item.active;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>性能监听关键代码如下：</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 等待DOM更新完成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 记录结束时间并计算差值</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> endTime</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">updateTime.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">round</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(endTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startTime);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (performance.memory) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> memoryUsageBytes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> performance.memory.usedJSHeapSize;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> memoryUsageMB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (memoryUsageBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  memoryUsage.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(memoryUsageMB);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Memory usage after update: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">memoryUsageMB</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} MB\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`DOM update completed in \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">updateTime</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}ms\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><blockquote><p>之所以不完全使用控制台中的 Performance 来记录，是因为电脑比较卡，打开控制台本身就消耗了电脑不少性能。而且我们不需要多么精准的数据，需要的是对比。有了对比数据即可。</p></blockquote><h3 id="数据来源" tabindex="-1">数据来源 <a class="header-anchor" href="#数据来源" aria-label="Permalink to “数据来源”">​</a></h3><p><strong>Vapor Mode:</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/654315/1753260936414-c4c79d5c-54cd-4126-bc1e-5ad60bf9d66c.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/654315/1753264996004-4812f646-3f94-4358-9e53-7a0755a86244.png" alt=""></p><p><strong>传统模式：</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/654315/1753260964666-3d085815-2c0c-4c45-9f3c-a889e19ba06f.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/654315/1753264977057-87195717-c3a6-473a-84ff-494fafc93f8e.png" alt=""></p><h2 id="vapor-工作原理" tabindex="-1">Vapor 工作原理 <a class="header-anchor" href="#vapor-工作原理" aria-label="Permalink to “Vapor 工作原理”">​</a></h2><h3 id="配置流程" tabindex="-1">配置流程 <a class="header-anchor" href="#配置流程" aria-label="Permalink to “配置流程”">​</a></h3><p>基于 vue3@3.6.0-alpha.2 版本</p><h4 id="渐进式使用方式-混合渲染模式" tabindex="-1">渐进式使用方式(混合渲染模式) <a class="header-anchor" href="#渐进式使用方式-混合渲染模式" aria-label="Permalink to “渐进式使用方式(混合渲染模式)”">​</a></h4><ol><li>从 vue 中导出 vaporInteropPlugin 并 use</li></ol><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import { createApp, vaporInteropPlugin } from &#39;vue&#39; import App from &#39;./App.vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">import router from &#39;./router&#39; const app = createApp(App)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.use(vaporInteropPlugin) app.use(router) app.mount(&#39;#app&#39;)</span></span></code></pre></div><ol start="2"><li>在需要使用的 SFC 文件的 setup 中配置上 <code>vapor</code> 即可。</li></ol><h4 id="全量使用" tabindex="-1">全量使用 <a class="header-anchor" href="#全量使用" aria-label="Permalink to “全量使用”">​</a></h4><p>修改 main.ts 中的引入组件</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { createVaporApp } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./App.vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createVaporApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(App).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><blockquote><p>vue 的包体积从 50K 减少到 6k</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2025/png/654315/1753265976128-e7d94807-36af-4fba-87ea-9ec2ae23dbd3.png" alt=""></p><h3 id="vapor-执行过程" tabindex="-1">vapor 执行过程 <a class="header-anchor" href="#vapor-执行过程" aria-label="Permalink to “vapor 执行过程”">​</a></h3><p><img src="https://cdn.nlark.com/yuque/0/2025/png/654315/1753271068555-e6b29728-1703-45ac-876c-1b33060fdb70.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/654315/1753266797992-fb35a48c-fb11-4887-a00e-0d4bf3288dec.png" alt=""></p><blockquote><p>编译后的文件一般在 source 对应文件的下面，它的作用就是识别.vue 文件，然后把.vue 文件编译为 js 代码</p></blockquote><p>简化代码如下</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;button&gt;add count&lt;/button&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;div&gt; &lt;/div&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;button&gt;update class&lt;/button&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> t3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;div&gt;我是什么颜色&lt;/div&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _sfc_render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$attrs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$slots</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> n1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> t0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> n2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> t1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> n3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> t2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> n4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> t3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  n1.$evtclick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ctx.addCount;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> x2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  n3.$evtclick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _ctx.updateClass;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  _renderEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _setText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x2, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_toDisplayString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_ctx.count));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _setClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n4, _ctx.color);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [n1, n2, n3, n4];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上面是编译后的结果。</p><p>编译时: 识别了我绑定的在 DOM 上面可以进行的动态变改的是什么类型的节点。这次我想要改变的是 div 标签中的文本和 div 中字体的颜色。所以在生成的代码中就提前导入了 <code>setText</code> 以及 <code>setClass</code> 两个方法。</p><p>以 <code>setClass</code>为例，参数有两个：<code>_template(&quot;&lt;div&gt;我是什么颜色&lt;/div&gt;&quot;)</code>和 <code>ctx.color</code>。</p><p>我们最后来看看<code>_renderEffect</code>函数，看名字你可能已经猜出来了。这个函数和<code>vue3</code>中的<code>watchEffect</code>比较相似，会立即运行一个函数。并且追踪函数中用的的依赖，这里的依赖是<code>msg</code>变量。当依赖的值变化时会再次执行这个函数。</p><p>这里的<code>_setText(n1, _ctx.msg)</code>，实际就是执行了<code>n1.textContent = _ctx.msg</code>。<code>textContent</code> 属性表示一个节点及其后代的文本内容，也可能通过给它赋值的方式删除它的所有子节点，并替换为一个具有给定值的文本节点，和<code>innerText</code>功能比较相似。</p><h4 id="template-源码" tabindex="-1">_template 源码 <a class="header-anchor" href="#template-源码" aria-label="Permalink to “_template 源码”">​</a></h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/654315/1753277987653-172779a2-e138-484d-87d6-e2d0d2ad2cb0.png" alt=""></p><ol><li>isHydrating 为服务端渲染，服务 SSR，跳过</li><li><code>html[0] !== &#39;&lt;&#39;</code>为 true 说明是纯文本内容，直接创建文本节点，跳过模板解析流程。</li><li>t 使用单例模式，不多于创建 <code>template</code>。</li><li><code>if(!node)</code>缓存首次解析的 DOM 节点，避免重复解析 HTML 字符串, 如果已经存在了，通过 <code>cloneNode</code> 复用已经创建，减少 DOM 操作成本。</li></ol><h4 id="settext-源码" tabindex="-1">_setText 源码 <a class="header-anchor" href="#settext-源码" aria-label="Permalink to “_setText 源码”">​</a></h4><h4 id="" tabindex="-1"><img src="https://cdn.nlark.com/yuque/0/2025/png/654315/1753279257903-7fbace23-1e13-4758-99c2-b1f72c7e9137.png" alt=""> <a class="header-anchor" href="#" aria-label="Permalink to “”">​</a></h4><blockquote><p><code>nodeValue</code>：直接修改 DOM 文本节点的内容（<code>textContent</code> 的底层实现）。</p></blockquote><p>这里做了一个优化，如果值没有变化，就不重新个 <code>el.nodeValue</code>赋值。</p><p>上面代码转化为下面代码片段，直接改变的是文本本身，因为传进来的 childNodes 只有文本。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).childNodes[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el.nodeValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el.$txt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;</span></span></code></pre></div><h4 id="rendereffect-源码" tabindex="-1">_renderEffect 源码 <a class="header-anchor" href="#rendereffect-源码" aria-label="Permalink to “_renderEffect 源码”">​</a></h4><p><img src="https://cdn.nlark.com/yuque/0/2025/png/654315/1753280633388-6d30f4dc-c8d1-4ece-8585-27b0a96be070.png" alt=""></p><p>renderEffect 继承于 <code>ReactiveEffect</code>类，也就是说，我们传进去的函数作为一整个副作用在运行。</p><blockquote><p><code>watchEffect</code> 本质上是通过封装 <code>ReactiveEffect</code> 类实现的高级用户 API。</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2025/png/654315/1753281228512-0d4e769d-4c18-49d6-8885-b282d829cbf1.png" alt=""></p><p><code>this.render()</code>就是执行我们传进行的下面的代码。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  _setText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x2, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_toDisplayString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_ctx.count));</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  _setClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n4, _ctx.color);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><code>_renderEffect(() =&gt; { ... })</code> 会自动追踪其回调函数内访问的所有响应式变量（如 <code>_ctx.count</code> 和 <code>_ctx.color</code>）。无论这些变量是否在本次更新中真正变化，只要它们被访问，就会被记录为依赖。</p><p>然后只有其中一个变量改变了，就会执行一次上面的 <code>fn()</code>函数，<code>_setText</code>和 <code>_setClass</code>都会被执行。</p><blockquote><p>这个应该是需要它们后期优化的，我明明只是修改其中一个变量，为什么另外一个不相关的 _setClass 也执行了呢？但是执行函数里面有了一定的优化，看_setText 源码部分。</p></blockquote><p>上面的代码简而言之，就是 直接调用 DOM API 对变量进行精细化渲染。</p>`,66)),s("div",o,[i[1]||(i[1]=s("p",{class:"custom-block-title custom-block-title-default"},"INFO",-1)),s("p",null,[s("u",null,[k(t,{style:{color:"#DF2A3F"}},{default:E(()=>i[0]||(i[0]=[r("也就是说？Vapor 在编译时就确定了 t1 这个 DOM 节点需要更新 count 数据,不需要再 diff 一遍！",-1)])),_:1,__:[0]})])])]),i[8]||(i[8]=a(`<h4 id="compiler-vapor-源码" tabindex="-1">compiler-vapor 源码 <a class="header-anchor" href="#compiler-vapor-源码" aria-label="Permalink to “compiler-vapor 源码”">​</a></h4><p>IR 是重点.....</p><p>看不懂，编译时，在解析文本，确定哪个 Dom 是需要精准更新的。</p><h4 id="apicreatefor" tabindex="-1">apiCreateFor <a class="header-anchor" href="#apicreatefor" aria-label="Permalink to “apiCreateFor”">​</a></h4><p>diff 不完全从运行时中删除了。比如在 v-for 中。源码位置如下：</p><p><code>packages/runtime-vapor/src/apiCreateFor.ts</code></p><p>源码如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/654315/1753696188297-a7d841ab-2126-4a96-abd5-43798be69458.png" alt=""></p><p>在运行时 中，v-for 循环依旧使用了 diff 算法。</p><h4 id="总结一下它执行的过程" tabindex="-1">总结一下它执行的过程： <a class="header-anchor" href="#总结一下它执行的过程" aria-label="Permalink to “总结一下它执行的过程：”">​</a></h4><ul><li>编译时：通过 AST 分析标记动态绑定与响应式依赖，生成精准的 DOM 操作指令；</li><li>运行时：通过 <code>_renderEffect</code> 实现细粒度更新，完全跳过虚拟 DOM；</li></ul><p>所以等同于把 “diff 算法” 或者“虚拟 DOM”这些的操作提前在 vue 的 Compiler 中进行了处理。运行时只需要操作 DOM API 精准渲染，不存在寻找这次改变的是哪一个位置的逻辑了，运行时简化了计算节点的逻辑。</p><blockquote><p><em><strong>这就是本地初始化的时候，首屏加载的速度没有明显的提升，那是因为 Compiler 增加了对于动态绑定标记与响应式依赖分析逻辑，会在本地开发或首次构建时带来额外开销。</strong></em></p></blockquote><h2 id="传统-node-执行过程" tabindex="-1">传统 node 执行过程 <a class="header-anchor" href="#传统-node-执行过程" aria-label="Permalink to “传统 node 执行过程”">​</a></h2><p>具体代码如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/654315/1753271321802-b29229a5-eeb4-4ac6-a160-1f21063bc301.png" alt=""></p><p>简化如下</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> _sfc_render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_ctx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _openBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _createElementBlock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      _Fragment,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        _createElementVNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          { onClick: $setup.addCount },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;add count&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        _createElementVNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          _toDisplayString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($setup.count),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          /* TEXT */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        _createElementVNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          { onClick: $setup.updateClass },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;update class&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        _createElementVNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            class: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_normalizeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($setup.color),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &quot;我是什么颜色&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          /* CLASS */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      64</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      /* STABLE_FRAGMENT */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="https://cdn.nlark.com/yuque/0/2025/png/654315/1753270858551-4b0d5e8d-6c4b-46de-b3ec-7d25fb791b98.png" alt=""></p><p>相比传统的执行过程，vapor 模式执行如下：</p><p><img src="https://cdn.nlark.com/yuque/0/2025/png/654315/1753270866798-fa49bc7a-9263-456b-a005-074a468a4fde.png" alt=""></p><p>总结：</p><ol><li>diff 算法的删除减少了 patch 的执行时间。</li><li>虚拟 DOM 删除，减少了大量变量的存在，直接减少了内存的占用。</li></ol><h3 id="执行过程" tabindex="-1">执行过程 <a class="header-anchor" href="#执行过程" aria-label="Permalink to “执行过程”">​</a></h3><h4 id="_1-初始化阶段" tabindex="-1">1. 初始化阶段 <a class="header-anchor" href="#_1-初始化阶段" aria-label="Permalink to “1. 初始化阶段”">​</a></h4><p>模板编译：Vue 的编译器会将你的 template 编译为渲染函数（render function），生成的虚拟 DOM 结构大致如下：</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;div&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;h1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;HelloWorld&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`count is \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>响应式数据绑定：count 被 ref(0) 包裹后，Vue 会将其转换为响应式对象，并建立依赖追踪。</p><h4 id="_2-首次渲染" tabindex="-1">2. 首次渲染 <a class="header-anchor" href="#_2-首次渲染" aria-label="Permalink to “2. 首次渲染”">​</a></h4><p>生成虚拟 DOM 树，执行渲染函数，生成初始虚拟 DOM（VNode）。</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;div&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;h1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, children: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HelloWorld&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;button&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, props: { onClick: handler }, children: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;count is 0&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>挂载真实 DOM：Vue 将虚拟 DOM 转换为真实 DOM 并插入页面。</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;HelloWorld&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;count is 0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="_3-更新阶段" tabindex="-1">3. 更新阶段 <a class="header-anchor" href="#_3-更新阶段" aria-label="Permalink to “3. 更新阶段”">​</a></h4><ul><li>触发响应式更新：点击按钮 → count.value++ → 触发 count 的 setter 通知依赖（副作用）。</li><li>重新生成虚拟 DOM：重新执行渲染函数，生成新的虚拟 DOM。</li></ul><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;count is 1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只有 count 文本变化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>Diff 算法对比差异：Vue 对比新旧虚拟 DOM，发现只有 button 的文本子节点变化（0 → 1）。</li><li>精准更新真实 DOM：直接修改按钮的 textContent，无需重新创建整个 DOM 树。</li></ul><p>button.textContent = &#39;count is 1&#39;;</p><p>以上便是对 Vue 虚拟 DOM 工作流程的简化描述，Vue 的虚拟 DOM 工作流程在实际执行中还有一些优化细节和边界情况，这个大家有兴趣可以去看一下 Vue 的源码，这里不做过多的阐述，只是让大家有个印象。</p><h4 id="感想" tabindex="-1">感想 <a class="header-anchor" href="#感想" aria-label="Permalink to “感想”">​</a></h4><p>痛苦不会消失，只是会转移，Vapor 将耗时的逻辑从运行时转移到了编译时。但是优化编译时的逻辑，所以实现了总体性能的极大提升的同时，总的痛苦也减少了很多。</p><h2 id="当前版本注意事项" tabindex="-1">当前版本注意事项 <a class="header-anchor" href="#当前版本注意事项" aria-label="Permalink to “当前版本注意事项”">​</a></h2><h3 id="官方的话" tabindex="-1">官方的话: <a class="header-anchor" href="#官方的话" aria-label="Permalink to “官方的话:”">​</a></h3><ul><li><p>适用场景：</p><ul><li>✅ 新项目初始化（createVaporApp）</li><li>✅ 性能敏感页面（如首屏、数据看板）的局部启用（<code>&lt;script setup vapor /&gt;</code>）</li></ul></li><li><p>规避风险：</p><ul><li>❌ 避免老项目全量迁移</li><li>❌ 暂勿依赖高级功能（如 SSR 激活、异步组件）</li><li>❌ 大量依赖第三方 VDOM 组件库（兼容性存在边界问题）；</li><li>❌ 暂勿依赖高级功能（如 SSR 激活、异步组件）</li><li>❌ 大量依赖第三方 VDOM 组件库（兼容性存在边界问题）；</li></ul></li></ul><h3 id="不使用的具体-api" tabindex="-1">不使用的具体 API <a class="header-anchor" href="#不使用的具体-api" aria-label="Permalink to “不使用的具体 API”">​</a></h3><p>defineAsyncComponent、<code>&lt;KeepAlive&gt;</code>、<code>&lt;Teleport&gt;</code>、<code>&lt;Suspense&gt;</code>都没有支持，计划中。</p><div class="info custom-block"><p class="custom-block-title custom-block-title-default">INFO</p><p>列表渲染 v-for 中依旧存在 diff 算法，而且是完整的 diff 算法。</p></div><p><strong>Vapor 并不是简单粗暴地抛弃了所有 diff 算法，而是做了精细化的场景区分。</strong></p><ul><li>在 90%的常规场景下，通过编译时优化实现了&quot;无 diff&quot;更新</li><li>在复杂的列表场景下，保留了成熟稳定的 diff 算法</li></ul><p><strong>理出一个简单的表格总结：</strong></p>`,50)),s("table",c,[i[6]||(i[6]=s("thead",null,[s("tr",null,[s("th",null,"场景"),s("th",null,"Vapor 的策略"),s("th",null,"原因")])],-1)),s("tbody",null,[s("tr",null,[s("td",null,"简单绑定 "+d(n.name),1),i[2]||(i[2]=s("td",null,"直接更新，无 dif",-1)),i[3]||(i[3]=s("td",null,"编译时就能确定更新目标",-1))]),i[4]||(i[4]=s("tr",null,[s("td",null,"条件渲染 v-if"),s("td",null,"简单替换，无 diff"),s("td",null,"只需要显示/隐藏，不复杂")],-1)),i[5]||(i[5]=s("tr",null,[s("td",null,"列表渲染 v-for"),s("td",null,"保留 diff 算法"),s("td",null,"需要处理复杂的增删改移动")],-1))])])])}const B=l(g,[["render",y]]);export{f as __pageData,B as default};
