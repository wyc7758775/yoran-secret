import{_ as n,I as p,c as s,o as a,b2 as i,j as l,J as r,a as t,w as d}from"./chunks/framework.BpzV57uv.js";const y=JSON.parse('{"title":"CodeReview 礼仪","description":"","frontmatter":{},"headers":[],"relativePath":"posts/最佳实践/CodeReview礼仪.md","filePath":"posts/最佳实践/CodeReview礼仪.md"}'),u={name:"posts/最佳实践/CodeReview礼仪.md"},b={id:"_2-1-评论规范",tabindex:"-1"},g={id:"_4-1-总结",tabindex:"-1"};function f(m,e,v,w,C,R){const o=p("font");return a(),s("div",null,[e[34]||(e[34]=i('<h1 id="codereview-礼仪" tabindex="-1">CodeReview 礼仪 <a class="header-anchor" href="#codereview-礼仪" aria-label="Permalink to “CodeReview 礼仪”">​</a></h1><h2 id="一、序言-原来程序员是这么合作的" tabindex="-1">一、序言: 原来程序员是这么合作的 <a class="header-anchor" href="#一、序言-原来程序员是这么合作的" aria-label="Permalink to “一、序言: 原来程序员是这么合作的”">​</a></h2><p>在我工作的前四年, 经常会在网上看到 Code Review 这个词. 但是却从来实践过.</p><p>看着他们对于 Code Review 习以为常的样子, 我宛如活在了平行世界. 不知道他们在说什么, 虽然每一个字都认识, 自然也没有什么感触.</p><p>直到第五年,加入了现在的公司,才真正的知道 Code Review 是什么一回事. 或者说只是知道一冰山一角,毕竟到现在只有不到一年的 Code Review 的经验. 但是给我带来的感触还是很深的.</p><blockquote><p>向开源项目提交 PR, 也有 Code Review? 不好意思, 在此之前,从来不看别的源码,面向百度编程罢了</p></blockquote><p>这篇文章, 会首先介绍什么是 Code Review, 然后到我们组现在的 Code Review 流程, 接着到处理的好会打起来的 Code Review 礼仪。 最后加上一个问题， 小公司是否需要 Code Review。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/654315/1670130932656-379fd2f1-195d-446e-bdb3-965bbd90dbff.png" alt=""></p><p>最后一个问题,我想来还是有一定的发言权的. <strong>在工作的前四年换了六家公司, 去一家倒闭一家</strong>. 并不是我想要跳槽,只是普本的学历、菜狗的技术, 很多人看不起的外包我都面不过. 再加上运气着实有点问题。</p><p>所以在这些小公司协作的时候, 相当原始。 svn 代码管理, 本地项目打包出 dist 文件夹, 压缩之后通过 QQ 传给后台上传。 即便到了负责 APP 的时候, 也是本地手动打包出<code>.app</code>发送到测试手机上面.。</p><p>即便后来用了 git,也和 svn 的使用没有任何差别, 不存在什么代码审查, 仓库权限的配置. <code>PR</code>和 <code>MR</code>是啥意思都分不清楚. CI 和 CL 是啥？</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/654315/1670130597950-fb28e693-8e4a-4944-9e85-02d802d0da96.png" alt=""></p><p>我的本科虽然是计算机科学与技术,但是除了学习,啥都干。</p><p>直到来到了现在的这家公司, 才知道,原来程序员是这么协作的. 这篇文章只说 Code Review, 其他方面之后再出一片文章详细谈谈。</p><h2 id="二、什么是-code-review" tabindex="-1">二、什么是 Code Review <a class="header-anchor" href="#二、什么是-code-review" aria-label="Permalink to “二、什么是 Code Review”">​</a></h2><p>Code Review 就是将自己的代码公开的给其他程序员审查的过程。</p>',16)),l("p",null,[e[1]||(e[1]=t("Reviewer 和",-1)),r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[0]||(e[0]=[t("Reviewee 之间主要是通过 comment 来进行沟通，comment 可以针对每一行来进行评论。",-1)])),_:1,__:[0]})]),l("ul",null,[l("li",null,[r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[2]||(e[2]=[t("熟悉同事在编程时的思考方式，这样其余同事以后如果有需要就可以更轻松、快速的修改代码。",-1)])),_:1,__:[2]})]),l("li",null,[r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[3]||(e[3]=[t("向同事介绍修改了哪些文件，增加了什么样的功能，这样在问题出现时，可以保证至少有两个人可以帮助诊断、解决问题。",-1)])),_:1,__:[3]})])]),l("h3",b,[r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[4]||(e[4]=[t("2.1 评论规范",-1)])),_:1,__:[4]}),e[5]||(e[5]=t()),e[6]||(e[6]=l("a",{class:"header-anchor",href:"#_2-1-评论规范","aria-label":"Permalink to “2.1 评论规范”"},"​",-1))]),r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[7]||(e[7]=[t("comment 也有规范，如下",-1)])),_:1,__:[7]}),e[35]||(e[35]=i('<div class="info custom-block"><p class="custom-block-title custom-block-title-default">INFO</p><p>[request] 我建议这里可以更改为函数 forEach 用户，这个更加的复合规范</p><p>[advise] 这里的判断为了应对之后的扩展，可以考虑使用策略模式</p><p>[question] 为什么需要多加一个变量来进行判断</p></div><p>通过<code>[]</code>包住的标识含义还是很直接的。</p><ul><li>[request] 必须要修改才能够通过</li><li>[advise] 不修改也可以通过</li><li>[question] 需要 reviewee 解释一下</li></ul><h3 id="_2-2-cm-实际是在-m-什么" tabindex="-1">2.2 CM 实际是在 M 什么 <a class="header-anchor" href="#_2-2-cm-实际是在-m-什么" aria-label="Permalink to “2.2 CM 实际是在 M 什么”">​</a></h3>',4)),r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[8]||(e[8]=[t("目的是提高代码质量",-1)])),_:1,__:[8]}),r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[9]||(e[9]=[t("提前发现 bug 外，还包括统一团队的代码规范，比如经常会碰到有人说你这个变量命名不对",-1)])),_:1,__:[9]}),l("p",null,[e[12]||(e[12]=t("代码风格通过配置 Eslint 来进行统一，命",-1)),r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[10]||(e[10]=[t("名规则，",-1)])),_:1,__:[10]}),e[13]||(e[13]=l("a",{href:"https://www.zhihu.com/search?q=%E8%AF%AD%E6%B3%95%E6%A3%80%E6%9F%A5&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A%2293450972%22%7D",target:"_blank",rel:"noreferrer"},"语法检查",-1)),r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[11]||(e[11]=[t("，分支规范等",-1)])),_:1,__:[11]}),e[14]||(e[14]=t("是需要提前团队规范来解决的。这些都不应该放在 Code Review 上面。",-1))]),e[36]||(e[36]=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2022/png/654315/1670165488441-c670d235-e9c3-46ad-863a-c2de5eecad94.png",alt:""})],-1)),e[37]||(e[37]=l("p",null,"所以实际上，在 CM 之前是有前置条件的：",-1)),e[38]||(e[38]=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2022/jpeg/654315/1670430205802-6b0e6221-ba38-4476-a7f1-e1dfceda3a76.jpeg",alt:"画板"})],-1)),e[39]||(e[39]=l("p",null,"在这里之后才开始 CM。CM 的内容基本包括下面：",-1)),e[40]||(e[40]=l("ul",null,[l("li",null,"业务 BUG"),l("li",null,"代码质量")],-1)),e[41]||(e[41]=l("p",null,"业务 BUG 很直接，很多时候，写的东西不一定用在一个场合，而写的人不一定都熟悉。",-1)),e[42]||(e[42]=l("p",null,"代码质量包括这些内容：",-1)),l("ul",null,[e[18]||(e[18]=l("li",null,"人工检查代码格式化的漏网之鱼",-1)),e[19]||(e[19]=l("li",null,"是否存在重复",-1)),e[20]||(e[20]=l("li",null,[t("最佳实践，"),l("code",null,"if else"),t("、参数过多、ES6、设计模式（怼人的理论基础是《重构-改善既有代码》）")],-1)),l("li",null,[r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[15]||(e[15]=[t("命名可读性,能自我阐述的最好,英文用词尽量准确(命名是所有程序员的头痛之一)",-1)])),_:1,__:[15]})]),l("li",null,[r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[16]||(e[16]=[t("注释,恰到好处的注释,重要的地方及时备注,不需要的地方要删除一定的注释信息,代码既是给机器运行的,也同时是交接给人看的.",-1)])),_:1,__:[16]})]),l("li",null,[r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[17]||(e[17]=[t("代码是否健壮，是否可扩展",-1)])),_:1,__:[17]})])]),r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[21]||(e[21]=[t("我们的目标是消灭下面这张图：",-1)])),_:1,__:[21]}),e[43]||(e[43]=l("p",null,[l("img",{src:"https://cdn.nlark.com/yuque/0/2022/png/654315/1670428340001-0c55330d-9c2c-4e2b-a34b-1df6ab1c131c.png",alt:""})],-1)),e[44]||(e[44]=l("h2",{id:"三、我们组的-code-review-流程",tabindex:"-1"},[t("三、我们组的 Code Review 流程 "),l("a",{class:"header-anchor",href:"#三、我们组的-code-review-流程","aria-label":"Permalink to “三、我们组的 Code Review 流程”"},"​")],-1)),r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[22]||(e[22]=[t("我们组是每一次 Merge Request 都进行 Code Review。",-1)])),_:1,__:[22]}),l("blockquote",null,[r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[23]||(e[23]=[t("还有一种是每隔一段时间集中大家一起来进行 CR。",-1)])),_:1,__:[23]})]),e[45]||(e[45]=i('<p>基本的流程图如下:</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/654315/1670148225843-b74c85c7-7433-4244-91cc-1e0f476649e3.png" alt=""></p><p>简单来说，就是从 test 分支拉取最新的代码之后，开发完成之后需要合并到远程自己定义的分支，随后将这个分支申请合并到远程 test 分支上面，通过 CI 自动扫描之后，就出发代码审查阶段了</p><ul><li>name_需求编码指的是, 远程的分支的名称 = 是以自己的名字的首字母 + 下划线 + 需求的 ID。</li><li>test 分支在经过测试之后， 才会被允许合并到 releasel 分支， 这个过程是封版。将该分支发布部署之后，就可以合并到 master 分支。当然，这个涉及到了分支策略的问题，以后再谈</li></ul><p>我们组最多的时候十个人, 评审的人员除了申请人, 其他人都是评审员. 每一个 PR 只需要两个评审的通过就可以入库。当有未必解决状态的评论的时候，其他评审人一般情况是不能审批通过的。</p><p>这样的评审的机制其实已经相当宽松了 ，也是希望所有人都能够参与到评审当中，相互都能够了解到对方模块的情况。</p><p>但是现实中情况还是不太一样，由于人员之间的水平是有差距的，我们的人员搭配是两个内部的搭配 7/8 个外包的伙伴。虽然平时开发已经再三说明可以给任何人审查代码，不过由于整个环境的问题，实际上敢点击通过代码的依旧只有内部的两个人。形成了事实上的两人评审。</p><h2 id="四、code-review-礼仪" tabindex="-1">四、Code Review 礼仪 <a class="header-anchor" href="#四、code-review-礼仪" aria-label="Permalink to “四、Code Review 礼仪”">​</a></h2>',8)),r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[24]||(e[24]=[t("Code Review 的礼仪决定了你是否会被同事背后捅刀。主要是谨记一条原则：",-1)])),_:1,__:[24]}),l("p",null,[l("strong",null,[r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[25]||(e[25]=[t("只针对代码不针对人",-1)])),_:1,__:[25]})])]),l("h3",g,[r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[26]||(e[26]=[t("4.1 总结",-1)])),_:1,__:[26]}),e[27]||(e[27]=t()),e[28]||(e[28]=l("a",{class:"header-anchor",href:"#_4-1-总结","aria-label":"Permalink to “4.1 总结”"},"​",-1))]),e[46]||(e[46]=l("h4",{id:"对评审人员的建议",tabindex:"-1"},[t("对评审人员的建议： "),l("a",{class:"header-anchor",href:"#对评审人员的建议","aria-label":"Permalink to “对评审人员的建议：”"},"​")],-1)),e[47]||(e[47]=l("ul",null,[l("li",null,"看不明白的时候，可以适当的提醒对方添加注释"),l("li",null,"看不明白的时候，是请教对方而不是责问对方"),l("li",null,"不管是明确修改的方案还是指出问题，给出自己的理由，依据，而不是感觉"),l("li",null,"评论的内容不要过于广泛")],-1)),l("p",null,[e[30]||(e[30]=t("作为 reviewer 提出 comment,",-1)),r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[29]||(e[29]=[t("目的是提升项目代码质量，而不是抨击别人，质疑别人的能力，应该保持平等友善的语气。",-1)])),_:1,__:[29]})]),r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[31]||(e[31]=[t("评论的内容广泛的问题，比如说，评论 Reviewee 的耦合度太高。这么的言论就很操蛋，我们需要提出的是具体的建议，可以给出具体的改进的伪代码。不然最好闭嘴。",-1)])),_:1,__:[31]}),e[48]||(e[48]=l("h4",{id:"对提审人的建议",tabindex:"-1"},[t("对提审人的建议： "),l("a",{class:"header-anchor",href:"#对提审人的建议","aria-label":"Permalink to “对提审人的建议：”"},"​")],-1)),e[49]||(e[49]=l("ul",null,[l("li",null,"每次提交的代码量都尽可能的小"),l("li",null,"反驳一定需要给出的依据"),l("li",null,"相比评审人要更加的谦虚")],-1)),l("p",null,[e[33]||(e[33]=t("第一点，为了方便",-1)),r(o,{style:{color:"rgb(18, 18, 18)"}},{default:d(()=>e[32]||(e[32]=[t("审阅者可以轻松了解代码中有哪些更改以及做了什么。如果 code review 的内容足够少，则可以更频繁地进行，可能每天几次，而且更易于管理。",-1)])),_:1,__:[32]})]),e[50]||(e[50]=i('<p>对于第二点，评审的人花了这么多时间给你来看代码。如果提出的建议能够改善你写的代码，或者直接指出了问题，提审人都是最大的受益者。</p><h3 id="_4-2-话术的建议" tabindex="-1">4.2 话术的建议 <a class="header-anchor" href="#_4-2-话术的建议" aria-label="Permalink to “4.2 话术的建议”">​</a></h3><table tabindex="0"><thead><tr><th><strong>bad</strong></th><th><strong>good</strong></th></tr></thead><tbody><tr><td>你要这么做</td><td>我建议这么做/这么干是否更加好</td></tr><tr><td>你写的代码比较差</td><td>这块代码写得比较差</td></tr><tr><td>你这里写得太坑了</td><td>重构里面提议这种情况应该提取函数</td></tr></tbody></table><p><strong>最重要的一点就是，不要吝啬你的夸奖！</strong></p><p>当你实在找不到问题的时候，多夸夸你的同事吧。这段代码设计得真好，这段代码性能提升得真高。当然，平时做人的时候也应该如此。</p><h2 id="五、小公司是否需要-code-review" tabindex="-1">五、小公司是否需要 Code Review <a class="header-anchor" href="#五、小公司是否需要-code-review" aria-label="Permalink to “五、小公司是否需要 Code Review”">​</a></h2><p><strong>不需要！</strong></p><p>对于公司而言，<strong>业务第一，产品第二，技术无所属</strong>。领导只关心如何活下去。所以对于你如何使用技术并不关心，关心的是业务是否来钱，自己还有几套房可以抵押。</p><p>你们进行 CR 是需要时间，这是钱。</p><p>你们想要提高代码质量，需要持续重构优化，客户操作界面的时候感受得出来么？如果没有，那是浪费钱。</p><p>无关褒贬，客观事实罢了。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/654315/1670431699881-77bcfed9-e230-428b-8631-7e558d4977ea.png" alt=""></p><p>但是对于个人而言呢？<strong>需要，相当需要</strong>。</p><p>都不小了，要明白自己应该做什么。</p><p>如果团队的 Code Review 有没有推行没关系,有,自然是非常的。没有的话，你也要通过别的手段自我提升。</p><p>但凡有好的事物都应该主动去尝试,去坚持,克服外来因素影响。</p><p>一个人,也同样可以 Review 自己和同事代码,为的不是公司，为的是自己。</p><p>Review 水平比自己高的，可以直接提升自己的编码能力，学习高水平的思路和设计。</p><p>Review 水平比自己低的，可以看看那些错误都是怎么发生的，告诫自己。</p><p>Review 水平和自己差不多的，可以换位思考，如果是自己来实现会怎么实现。</p><p>卷起来吧，</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/654315/1670432316837-879ab9e2-8ee5-4cdb-a6eb-0e9b4e01b655.png" alt=""></p><p>放错图，应该是</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/654315/1670432581437-dbcfb7eb-1e13-43f2-8bb2-60010b9f1c14.png" alt=""></p>',24))])}const k=n(u,[["render",f]]);export{y as __pageData,k as default};
