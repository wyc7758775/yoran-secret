import{_ as i,c as a,o as t,b0 as n}from"./chunks/framework.Csu_mt2F.js";const d=JSON.parse('{"title":"generator和iterator","description":"","frontmatter":{"createTime":"2025-04-21T00:00:00.000Z","category":"Web","smallClass":"JavaScript"},"headers":[],"relativePath":"documents/JavaScriptCore/generator和iterator.md","filePath":"documents/JavaScriptCore/generator和iterator.md"}'),e={name:"documents/JavaScriptCore/generator和iterator.md"};function l(h,s,r,k,p,o){return t(),a("div",null,s[0]||(s[0]=[n(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to “前言”">​</a></h2><p>最近重新现在看红宝书，总算知道为什么迭代器和生成器这两个概念为什么那么难理解了，根本原因是平时直接使用到的机会确实是非常的少，其次就是书上面为了介绍这两个概念使用了非常多的专业的名词来描述，而且相互穿插，能把人看睡着了都。下面简单的描述一下书中的介绍这两个概念的思路。</p><h3 id="迭代器导读" tabindex="-1">迭代器导读 <a class="header-anchor" href="#迭代器导读" aria-label="Permalink to “迭代器导读”">​</a></h3><p>在迭代器中，先介绍了迭代，在 ES6 之前for和forEach两个循环的问题，引出了迭代器模式。接下来就自然的介绍迭代器模式，它包含两个概念：</p><ol><li>第一个是可迭代协议，介绍了它具备的能力，以及实现它的必要条件，最后介绍了当前内置的类型都有那些实现了这个可迭代协议，并且可以接受这些内置类型的原生语言特使包括那些。</li><li>第二个是迭代器协议，介绍了它的基本概念和基本使用方法。了解了了迭代器的协议之后，也可以称呼它们为迭代器的接口，就介绍了自定义迭代器如何实现和一些细则。</li></ol><p>但是关于两个协议的关系和职责范围没有总结出来，导致了我对于他们的关系一直很模糊，经常混淆在一起。总结一下：</p><table tabindex="0"><thead><tr><th><strong>协议类型​</strong>​</th><th>​<strong>​可迭代协议（Iterable Protocol）​</strong>​</th><th>​<strong>​迭代器协议（Iterator Protocol）​</strong>​</th></tr></thead><tbody><tr><td>​<strong>​目的​</strong>​</td><td>定义对象如何被迭代（如 <code>for...of</code> 遍历）</td><td>定义如何按顺序访问元素（如 <code>next()</code> 方法）</td></tr><tr><td>​<strong>​实现方法​</strong>​</td><td>对象需实现 <code>[Symbol.iterator]()</code> 方法</td><td>对象需实现 <code>next()</code> 方法</td></tr><tr><td>​<strong>​返回值​</strong>​</td><td>返回一个​<strong>​迭代器对象​</strong>​（符合迭代器协议）</td><td>返回 <code>{ value: T, done: boolean }</code> 对象</td></tr><tr><td>​<strong>​核心作用​</strong>​</td><td>​<strong>​声明对象可被迭代​</strong>​</td><td>​<strong>​实际执行迭代过程​</strong>​</td></tr></tbody></table><h3 id="生成器导读" tabindex="-1">生成器导读 <a class="header-anchor" href="#生成器导读" aria-label="Permalink to “生成器导读”">​</a></h3><p>在生成器中，先介绍了生成器的写法，包含的元素和生命周期，存在暂停状态，存在<code>next()</code>方法，该方法返回的对象也是包含done属性和value属性。接下来介绍生成器最重要的组成部分：<code>yield</code>，被称为生成器最有用的地方。包括如下内容：</p><ol><li>中断执行，异步变为同步的关键</li><li></li></ol><p><strong>生成器和迭代器的关系如下</strong>：</p><p>生成器是一种特殊的函数结构，它返回的对象是一个迭代器。生成器函数本质上是 JavaScript 语法规范提供的一种<strong>用户自定义的迭代器工厂函数</strong>。</p><blockquote><p>生成器（Generator）<strong>不是基于 ES5 的语法糖</strong>，而是 <strong>ES6（ECMAScript 2015）引入的基础语言规范</strong>，需要 JavaScript 引擎在底层实现支持。</p></blockquote><h2 id="资料" tabindex="-1">资料 <a class="header-anchor" href="#资料" aria-label="Permalink to “资料”">​</a></h2><ul><li><a href="https://www.zhihu.com/question/55810122/answer/1988210728" target="_blank" rel="noreferrer">(1 封私信 / 9 条消息) es6 generator到底有什么用？ - 知乎 (zhihu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/34481617" target="_blank" rel="noreferrer">Rx.js 思想入门（讲义） - 知乎 (zhihu.com)</a><ul><li>generator是ES对迭代器的实现，迭代器源于设计模式。(这个事关generator怎么来的)，我们想知道generator有什么的本质其实是了解迭代器有什么作用。</li></ul></li></ul><h1 id="generator和iterator" tabindex="-1">generator和iterator <a class="header-anchor" href="#generator和iterator" aria-label="Permalink to “generator和iterator”">​</a></h1><p>![[截屏2022-01-30 02.22.26.png]] 这句感觉啥都没有说. 怎么写法就复杂了,怎么就枯燥了. 复杂体现在哪里?枯燥体现在哪里?如何手抖产生bug的.现在的人出教程都这么随意的么?</p><p>这个例子出自于《JavaScript 高级程序设计》第五版，是为了说明在迭代器这个规范出来之前ES 处理迭代的一个历史，有两个阶段，一个如图中使用到for循环，另外一个就是forEach更加函数式的写法。</p><p>for循环的凡事得出的结论也不是图中的两点，而是：</p><ol><li>迭代之前需要事先知道如何使用数据结构。</li><li>遍历顺序并不是数据结构固有的。</li></ol><h2 id="_1-总结一下在此之前的7组遍历的方法" tabindex="-1">1.总结一下在此之前的7组遍历的方法 <a class="header-anchor" href="#_1-总结一下在此之前的7组遍历的方法" aria-label="Permalink to “1.总结一下在此之前的7组遍历的方法”">​</a></h2><ul><li>forEach -&gt; 普通的数组遍历</li><li>map -&gt; 映射, 每一次遍历,返回bool.来决定当前元素是否纳入新的数组</li><li>filter -&gt; 过滤, 每一次遍历,返回bool,来决定当前元素是否纳入新的数组</li><li>reduce -&gt; 归纳, 每一次遍历,将挡元素收归到容器中</li><li>reduceRight -&gt; reduce的反向操作</li><li>every -&gt; 判定是否所有元素都符合一个条件</li><li>some -&gt; 判定是否有某一个或多个符合一个条件</li></ul><blockquote><p>async是Generator的语法糖，在Generator基础上封装的</p></blockquote><h2 id="_2-手写iterator" tabindex="-1">2. 手写iterator <a class="header-anchor" href="#_2-手写iterator" aria-label="Permalink to “2. 手写iterator”">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;姓名: 小野&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;年龄: 28&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;爱好: 我爱JavaScript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getIterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        value: arr[i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        done: i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> iterator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getIterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {value: 姓名: 小野, done: false}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {value: 年龄: 28, done: false}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {value: 爱好: 我爱JavaScript, done: false}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {value: undefined, done: true}</span></span></code></pre></div><h2 id="_3-es6提供的generator方法" tabindex="-1">3. ES6提供的Generator方法 <a class="header-anchor" href="#_3-es6提供的generator方法" aria-label="Permalink to “3. ES6提供的Generator方法”">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createIterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[i];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> iterator1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createIterator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {value: 姓名: 小野, done: false}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {value: 年龄: 28, done: false}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {value: 爱好: 我爱JavaScript, done: false}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iterator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// {value: undefined, done: true}</span></span></code></pre></div><p><em><em>基本构成就是</em> 加上yield.</em>*</p><h2 id="_4-generator实现async的写法" tabindex="-1">4. Generator实现async的写法 <a class="header-anchor" href="#_4-generator实现async的写法" aria-label="Permalink to “4.  Generator实现async的写法”">​</a></h2><p>大佬写的文章还是不错的 <a href="https://juejin.cn/post/6844903599529541645" target="_blank" rel="noreferrer">https://juejin.cn/post/6844903599529541645</a></p>`,30)]))}const g=i(e,[["render",l]]);export{d as __pageData,g as default};
