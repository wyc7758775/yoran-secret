import{_ as i,c as a,o as n,ah as l}from"./chunks/framework.5RKWivQp.js";const g=JSON.parse('{"title":"HTTP 协议","description":"","frontmatter":{},"headers":[],"relativePath":"posts/Network/HTTP 协议.md","filePath":"posts/Network/HTTP 协议.md"}'),h={name:"posts/Network/HTTP 协议.md"};function t(k,s,p,e,r,E){return n(),a("div",null,s[0]||(s[0]=[l(`<img width="60%" src="https://yoran-images-1256970527.cos.ap-guangzhou.myqcloud.com/20250824213628776.png"><h1 id="http-协议" tabindex="-1">HTTP 协议 <a class="header-anchor" href="#http-协议" aria-label="Permalink to “HTTP 协议”">​</a></h1><p>HTTP 协议可以等同于合同，大家按照合同办事就好，这个大家指的是浏览器和服务端，换句话来说就是它们之间的通信规则。</p><p>它本身是没有什么业务逻辑的，只存在通信规则的逻辑，所以我们作为一个 WEB 前端的开发而言，平时接触的 fetch 和 Axios 都是对于 HTTP 协议的使用。</p><p>所以我们学习的重点放在如下地方：</p><ol><li>业务开发的高频问题 <ol><li>跨域（CORS）</li><li>缓存优化（强缓存和协商缓存）</li><li>上传/下载进度</li><li>鉴权（JWT、 Cookie）</li></ol></li><li>性能提升 <ol><li>HTTP/2 和 HTTP/3 带来的特性</li></ol></li><li>调试和后端协作技巧 <ol><li>接口调式（看得懂 Network 面试，请求方法、状态码、请求头/响应头，快速定位问题）</li><li>和后端协作（method、参数格式、返回格式，扩展的知识点 RESTfull 和）</li></ol></li></ol><blockquote><p>推视频课程: <a href="https://www.bilibili.com/video/BV1rt4y1m7o5?p=5" target="_blank" rel="noreferrer">https://www.bilibili.com/video/BV1rt4y1m7o5?p=5</a> 推介书籍：《图解 HTTP 》</p></blockquote><h2 id="http-协议包含的内容" tabindex="-1">HTTP 协议包含的内容 <a class="header-anchor" href="#http-协议包含的内容" aria-label="Permalink to “HTTP 协议包含的内容”">​</a></h2><ol><li>请求报文</li></ol><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /api/data HTTP/1.1      ← 起始行</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> example.com           ← 头部</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">User-Agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Chrome</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> application/json    ← 空行分隔头部和主体</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            ← 主体（此请求没有主体）</span></span></code></pre></div><ul><li>第一行：请求方法（GET）、资源路径（/index.html）、协议版本（HTTP/1.1）。</li><li>后续行：请求头（描述浏览器信息、可接受的内容类型等）。</li></ul><ol start="2"><li>响应报文</li></ol><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> OK</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1234</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DOCTYPE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;...&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>第一行：协议版本、状态码（200）、状态描述（OK）。</li><li>后续行：响应头（内容类型、长度等）。</li><li>空行后是响应体（实际返回的 HTML 内容）。</li></ul><p>实际的场景 network 显示如下：</p><img width="60%" src="https://yoran-images-1256970527.cos.ap-guangzhou.myqcloud.com/20250824232530716.png"><p><strong>请求头如下：</strong></p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /yoran-secret/observer-detail.html?src=/life/xxxxx.md HTTP/2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Host</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wyc7758775.github.io</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">User-Agent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:141.0) Gecko/20100101 Firefox/141.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Accept-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gzip, deflate, br, zstd</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Sec-GPC</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Connection</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keep-alive</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Upgrade-Insecure-Requests</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Sec-Fetch-Dest</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> document</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Sec-Fetch-Mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> navigate</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Sec-Fetch-Site</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> none</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Sec-Fetch-User</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ?1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">If-Modified-Since</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Sun, 24 Aug 2025 12:30:13 GMT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">If-None-Match</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> W/&quot;68ab05d5-4660&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Priority</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> u=0, i</span></span></code></pre></div><p><strong>响应头如下：</strong></p><div class="language-http"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">HTTP/2 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">304</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Sun, 24 Aug 2025 15:02:39 GMT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">via</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1.1 varnish</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cache-control</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> max-age=600</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">etag</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> W/&quot;68ab05d5-4660&quot;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">expires</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Sun, 24 Aug 2025 15:12:39 GMT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-served-by</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cache-qpg1224-QPG</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> MISS</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-cache-hits</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-timer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> S1756047759.443579,VS0,VE242</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">vary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Accept-Encoding</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">x-fastly-request-id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> f28eeca139135be912285ed1f25113ba29ddc43a</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">X-Firefox-Spdy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> h2</span></span></code></pre></div><blockquote><p>想要在 network 面板中查看 HTTP/2 的只能在火狐中查看，谷歌浏览器看不到。具体请看：<a href="https://stackoverflow.com/questions/40800140/how-does-view-source-in-response-headers-go-missing-for-certain-sites" target="_blank" rel="noreferrer">https://stackoverflow.com/questions/40800140/how-does-view-source-in-response-headers-go-missing-for-certain-sites</a></p></blockquote><h2 id="业务开发高频问题" tabindex="-1">业务开发高频问题 <a class="header-anchor" href="#业务开发高频问题" aria-label="Permalink to “业务开发高频问题”">​</a></h2><h3 id="跨域-cors" tabindex="-1">跨域（CORS） <a class="header-anchor" href="#跨域-cors" aria-label="Permalink to “跨域（CORS）”">​</a></h3><p>JSONP、服务器反向代理（ng 配置和 vite 配置 proxy）、服务端配置白名单</p><ol><li><p><s>JSONP</s>： 已经不在使用</p></li><li><p>Vite 的 proxy 配置：</p></li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		&quot;/api&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://xxx.xxx.xx.x:8080&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			changeOrigin: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 允许跨域</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			secure: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//忽略安全证书</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			rewrite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#22863A;--shiki-light-font-weight:bold;--shiki-dark:#85E89D;--shiki-dark-font-weight:bold;">\\/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">api</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当我需要请求的地址为<code>http://xxx.xxx.xx.x:8080/user/login</code>  则我们在 vue 里使用 axios 发起请求为 <code>axios.get(&#39;/api/user/login&#39;)</code>。</p><ol start="3"><li>生产环境 NG 配置</li></ol><p><strong>生产环境使用 Nginx 反向代理 ​</strong>​：</p><p>部署时通过 Nginx 配置反向代理，将前端静态资源（如  <code>https://your-domain.com</code>）的请求转发到跨域接口（如  <code>https://api.other-domain.com</code>）。</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  listen </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      443</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ssl;          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 监听 HTTPS 端口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  server_name </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> api.example.com;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 实际域名</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # SSL 证书配置（替换为实际证书路径）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ssl_certificate </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/path/to/fullchain.pem;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 证书文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ssl_certificate_key </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/path/to/privkey.pem; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 私钥文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 强制 HTTP 跳转 HTTPS（可选）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($scheme </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!= </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 301</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> https://$host$request_uri;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 反向代理规则（同上）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> /api </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_pass </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://localhost:8080/api;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    proxy_set_header </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Host $host;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # ...其他头信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="缓存优化-强缓存和协商缓存" tabindex="-1">缓存优化（强缓存和协商缓存） <a class="header-anchor" href="#缓存优化-强缓存和协商缓存" aria-label="Permalink to “缓存优化（强缓存和协商缓存）”">​</a></h3><p>具体看[[HTTP 缓存机制]]</p><h3 id="上传-下载进度" tabindex="-1">上传/下载进度 <a class="header-anchor" href="#上传-下载进度" aria-label="Permalink to “上传/下载进度”">​</a></h3><p>浏览器对于这部分的实现有两种方式，<code>fetch</code>和<code>XHR</code>。</p><p><code>XHR</code>作为传统的网络实现，自带了<code>progress</code>事件实现监听下载进度，自带<code>upload</code>属性用于监听上传进度。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xhr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLHttpRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/large-file.zip&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听下载进度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;progress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.lengthComputable) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> percent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.loaded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.total) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`下载进度：\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">percent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}%\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;总大小未知，无法计算百分比进度&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听上传进度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> upload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xhr.upload;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">upload.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;progress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.lengthComputable) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> percent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e.loaded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e.total) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`上传进度：\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">percent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFixed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}%\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;总大小未知，无法计算百分比进度&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;下载完成&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">xhr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p><code>Fetch</code> API 的不提供，需要<code>ReadableStream</code> 和 请求头配置<code>Content-Length</code>来获取上传的进度，比较复杂，这里不展开说，我也没记住, 核心就是 fetch 需要配置其他的 API 来实现 xhr 中对应的功能，包括中断请求。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 你要上传的文件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uploaded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> total</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.size;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadableStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> reader</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getReader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (done) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			controller.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			uploaded </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			// 这里可以更新进度条</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(已上传: \${uploaded} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${total});</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		controller.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/upload&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;POST&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	body: stream,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/octet-stream&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		&#39;Content-Length&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: total</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><h3 id="鉴权-jwt、-cookie" tabindex="-1">鉴权（JWT、 Cookie） <a class="header-anchor" href="#鉴权-jwt、-cookie" aria-label="Permalink to “鉴权（JWT、 Cookie）”">​</a></h3><p>HTTP 协议是无状态的。</p><p>无状态的概念就是服务器不会通过 HTTP 协议来判断你是谁，不知道你是谁，自然就不会联系上下文，你不知道你知道问过什么？因为服务器要应对的不单单是你一个人。</p><p><strong>举个例子 🌰</strong>：</p><ul><li><strong>有状态</strong>：你和朋友聊天，朋友记得你之前说过的话（比如：“你上次说要去旅游，去了吗？”）。</li><li><strong>无状态</strong>：你每次给客服打电话，客服每次接电话都像第一次见你（比如你第一次说“我要订餐”，第二次说“我要付款”，客服不会自动关联这两次请求）。</li></ul><p>设你用浏览器访问一个网站：</p><ol><li>第一次请求：你登录网站，服务器返回“登录成功”。</li><li>第二次请求：你点击“查看购物车”，<strong>服务器不知道你是谁</strong>，因为它没记住你上次登录过！</li></ol><p><strong>结果</strong>：你每次操作（比如查看购物车、下单），服务器都像第一次见到你，需要你反复证明自己的身份。</p><ul><li><strong>简单高效</strong>：服务器不用费心思记每个用户的状态，能轻松处理海量请求。</li><li><strong>适合早期网页</strong>：早期的网页只是展示静态内容（比如新闻），不需要记住用户。</li></ul><p>所以问题就来了，我们实际业务中，确实是需求知道用户是谁的。那么就用以下的其他手段来解决这个问题了（扩展）</p><h4 id="方法-1-cookie" tabindex="-1"><strong>方法 1：Cookie</strong> <a class="header-anchor" href="#方法-1-cookie" aria-label="Permalink to “方法 1：Cookie”">​</a></h4><ul><li>原理：服务器在第一次返回响应时，通过<code>Set-Cookie</code>头告诉浏览器：“存一个身份证（Cookie）”。</li><li>后续请求：浏览器每次自动带上这个 Cookie，服务器就知道你是谁了。</li><li>例子：登录后，服务器给你一个 Cookie，之后你每次访问页面都自动带着它，服务器就知道你是已登录用户。</li></ul><h4 id="方法-2-session" tabindex="-1"><strong>方法 2：Session</strong> <a class="header-anchor" href="#方法-2-session" aria-label="Permalink to “方法 2：Session”">​</a></h4><ul><li>原理：服务器在内存或数据库中存一个用户状态（比如 Session ID），通过 Cookie 把 Session ID 传给浏览器。</li><li>例子：你登录后，服务器生成一个 Session ID 存起来，并通过 Cookie 给你，后续请求用这个 ID 找到对应的 Session 数据。</li></ul><h4 id="方法-3-token-如-jwt" tabindex="-1"><strong>方法 3：Token（如 JWT）</strong> <a class="header-anchor" href="#方法-3-token-如-jwt" aria-label="Permalink to “方法 3：Token（如 JWT）”">​</a></h4><ul><li>原理：服务器生成一个加密的 Token（令牌），里面直接包含用户信息，浏览器每次请求带着这个 Token。</li><li>例子：登录后服务器返回一个 Token，后续请求在<code>Authorization: Bearer &lt;token&gt;</code>头中带上它，服务器解密后就知道你是谁。</li></ul><p>但是这样不是违背初衷了吗？直接给 HTTP 设计为有状态的不就可以了吗？如果面试官问：“HTTP 无状态是缺点吗？为什么不直接设计成有状态？”</p><p><strong>可以回答</strong>： <strong>“HTTP 的无状态设计是权衡后的结果。早期为了简单高效，它不需要维护状态，适合传输静态资源。后来为了满足动态交互需求，通过 Cookie 等机制在应用层扩展了状态管理，而不是修改协议本身。这种分层设计既保持了 HTTP 的轻量，又让开发者能灵活应对业务需求。”</strong></p><p>Cookie 和 JWT 的区别：</p><ul><li>​Cookie 的局限性 ​：依赖同源策略，跨域（如前端  <code>app.example.com</code>调用后端  <code>api.example.com</code>）需额外配置 CORS，且 Cookie 无法直接用于移动端（无浏览器环境）。</li><li>​JWT 的优势 ​：作为请求头（如  <code>Authorization: Bearer &lt;token&gt;</code>）的一部分，天然支持跨域；移动端可直接存储 Token 并随请求发送，无需依赖 Cookie。</li></ul><blockquote><p>JWT 或 Cookie 的使用场景高度依赖后端的架构设计、技术选型和业务需求 ​​。前端的选择往往是“被动适配”。</p></blockquote><h2 id="提升性能和体验" tabindex="-1">提升性能和体验 <a class="header-anchor" href="#提升性能和体验" aria-label="Permalink to “提升性能和体验”">​</a></h2><ul><li>HTTP/0.9 <ul><li>仅支持 Get 请求</li><li>仅支持 HTML 格式资源</li></ul></li><li>HTTP/1.0 <ul><li>增加 POST 和 HEAD 请求方式</li><li>支持多种数据格式的请求和访问</li><li>支持 cache 缓存功能</li><li>新增状态码、多字符集支持、内容编码等</li><li>早起 HTTP/1.0 不支持 Keep-alive 长连接,只支持串行连接</li><li>后期 HTTP/1.0 增加 Connection:keep-alive 字段(非标准字段),开始支持长连接</li></ul></li><li>HTTP/1.1 <ul><li>增加持久连接（默认开启 Connection: keep-alive)</li><li>增加管道机制（支持多个请求同时发送）</li><li>增加 PUT/PATCH/OPTION/DELETE 等请求方式</li><li>增加 Host 字段（指定服务器域名）-＞案例：搜素百度 查看 network</li><li>增加 100 状态码 (Continue）,支持貝发送头信息</li><li>扩展身份认证机制（配合 SSL 实现数据的安全传输）</li><li>支持传送内容的一部分和文件断点续传</li><li>新增了 24 个错误状态码</li></ul></li><li>HTTP/2.0 <ul><li>新增双工通道(客户端同时发起多个请求,服务端同时处理多个请求)</li><li>服务端推送(服务器会把客户端需要的资源一起推送到客户端,合适加载静态资源)</li><li>头信息压缩机制(每次请求都会带上所有信息发给服务端)(HTTP 协议不带状态)</li><li>二进制协议(头信息和数据体使用二进制进行压缩)</li><li>多工(新增会先发送已处理好的部分，再响应其他请求，最后再处理没有处理好的部分)</li></ul></li><li>HTTP/3（2018 年草案，2020 年正式发布） <ul><li>底层协议变革： <ul><li>基于 QUIC 协议（UDP 实现），避免 TCP 的队头阻塞，提升移动网络下的连接稳定性 18；</li><li>0-RTT 建连：复用会话上下文，减少握手延迟 12；</li><li>独立流控制：每个数据流独立处理，丢包不影响其他流 68；</li><li>连接迁移：通过<code>Connection ID</code>标识连接，切换网络时无需重建 12。</li></ul></li><li>意义：为高延迟、高丢包场景（如 5G、物联网）提供更优性能 28。</li></ul></li></ul><p>版本更新中有一些 feature 扩展:</p><ul><li><code>keep-alive</code><ul><li>每次请求都需经历 ​<strong>​TCP 三次握手 ​</strong>​（建立连接）和 ​<strong>​ 四次挥手 ​</strong>​（关闭连接）的开销（约 100ms~300ms，取决于网络延迟）；</li><li>若网页包含多个资源（如图片、CSS、JS），每个资源都需单独建立 TCP 连接，导致“连接数爆炸”（例如一个页面加载 10 个资源，需 10 次 TCP 连接）, <code>keep-alive</code> 解决的就是这个。</li></ul></li><li>双工通道（<code>keep-alive</code> 的 patch） <ul><li>多个请求共享同一个 TCP 连接，服务端只需维护少量长连接（如 1 个连接处理 100 个请求），资源利用率更高。</li><li>10 个资源的请求通过多路复用并行传输，总耗时接近单个请求的延迟（如 100ms），加载速度提升 90%。 而<code>keep-alive</code>还是要串行传输，用时 1000ms。</li></ul></li><li>QUIC <ul><li>融合 UDP 性能和 TCP 的可靠性</li></ul></li></ul><p>这三点也是重要的性能提升，除此之外，还有配置<code>Content-Encoding: gzip</code> ，应用层调用压缩算法对于请求头和响应头进行压缩，降低传输数据的负载，这个也是一个很重要的性能优化。</p><h2 id="调试和后端协作" tabindex="-1">调试和后端协作 <a class="header-anchor" href="#调试和后端协作" aria-label="Permalink to “调试和后端协作”">​</a></h2><p>RESTfull 规范参考路径：<a href="https://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noreferrer">https://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p><ul><li>通用 HTTP 状态码</li></ul><table tabindex="0"><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>1xxx</td><td>信息,服务器收到请求,需要请求者继续执行操作</td></tr><tr><td>2xxx</td><td>操作成功并被接受处理</td></tr><tr><td>3xxx</td><td>重定向,需要进一步的操作以完成请求</td></tr><tr><td>4xxx</td><td>客户端错误,请求包含语法错误或无法完成请求</td></tr><tr><td>5xxx</td><td>服务器端的锅,服务器在处理请求的过程中发生错误</td></tr></tbody></table><h4 id="_304-重定向" tabindex="-1">304 重定向 <a class="header-anchor" href="#_304-重定向" aria-label="Permalink to “304 重定向”">​</a></h4><p>重定向的出现和[[HTTP 缓存机制]]有直接的关系. 在 HTTP 响应报文是默认配置的情况下,页面在已经访问过之后,再次访问的话,就有<strong>可能</strong>返回 304 的状态. 数据是直接从缓存中拿.</p><h4 id="_503-服务器错误" tabindex="-1">503 服务器错误 <a class="header-anchor" href="#_503-服务器错误" aria-label="Permalink to “503 服务器错误”">​</a></h4><p>找后台去处理吧</p>`,73)]))}const o=i(h,[["render",t]]);export{g as __pageData,o as default};
