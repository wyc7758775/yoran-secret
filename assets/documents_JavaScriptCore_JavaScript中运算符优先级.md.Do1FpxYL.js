import{_ as a,c as r,o as i,b0 as t}from"./chunks/framework.DbdIcpvf.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"documents/JavaScriptCore/JavaScript中运算符优先级.md","filePath":"documents/JavaScriptCore/JavaScript中运算符优先级.md"}'),l={name:"documents/JavaScriptCore/JavaScript中运算符优先级.md"};function p(c,e,s,o,h,n){return i(),r("div",null,e[0]||(e[0]=[t('<ul><li><p>Metadata</p><ul><li>Author:</li><li>Link:</li><li>Publisher</li><li>Date: [[2022-01-06]]</li><li>Status: #waiting</li><li>Tag:</li></ul></li><li><p>content</p><ul><li><p>JavaScript中运算符优先级的问题？</p></li><li><p>优先级 是 结合的优先级，不是说谁的优先级高就先给谁求值。</p></li><li><p>结合是什么意思呢？可以理解成是加一个括号</p><img src="https://pica.zhimg.com/50/v2-b2c09744a0088336494e8d9400d42065_720w.jpg?source=1940ef5c" data-rawwidth="294" data-rawheight="60" class="content_image" width="294"><p>上面的这条表达式，在执行的时候，可以看做是下面这样的，加个括号就很容易理解了吧</p><img src="https://pic2.zhimg.com/50/v2-4ec5ec1989d20449e25b0850be0ea68e_720w.jpg?source=1940ef5c" data-rawwidth="313" data-rawheight="57" class="content_image" width="313"></li><li><p>可是你不能说加了括号就要先给你求值啊，还是要按照基本法！！！从左往右</p></li><li><p>这里还有个短路计算的概念， || 操作符左边的是 true 的话，这个表达式的结果就是 true，不管右边的值是 false 还是 true，所以它就不会去求右边的值；&amp;&amp; 正好反过来，详细看文档：</p></li></ul><p><a href="https://link.zhihu.com/?target=https%3A//developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_Operators" target="_blank" rel="noreferrer"> 逻辑运算符 - JavaScript</a></p><ul><li><p>如果 fn01() 算出的结果是 true，那整个</p><p><a href="https://www.zhihu.com/search?q=%E8%A1%A8%E8%BE%BE%E5%BC%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A129171248%7D" target="_blank" rel="noreferrer">表达式</a>的结果就是 false，根本不会去求其他的值。</p><p><code>false || false &amp;&amp; true || true === false || (false &amp;&amp; true) || true</code></p></li><li><p>优先级是结合的优先级，不是说谁的优先级高就先给谁求值！！！</p></li><li><p>再通俗一点，看到谁的优先级高就给它加一个括号，就像这样：</p></li><li><p><code>1 + 2 * 3 === 1 + (2 * 3)</code></p></li></ul></li><li><p>Metadata</p><ul><li>Author: RednaxelaFX</li><li>Link:<a href="https://www.zhihu.com/question/52116922" target="_blank" rel="noreferrer">(2 条消息) JavaScript中运算符优先级的问题？ - 知乎 (zhihu.com)</a></li><li>Publisher: [[知乎]]</li><li>Date: [[2022-01-06]]</li><li>Status: #waiting</li><li>Tag:</li></ul></li><li><p>content</p><ul><li>前面的回答都说得挺好了。那我还是来放传送门：</li><li><a href="https://link.zhihu.com/?target=http%3A//rednaxelafx.iteye.com/blog/492667" target="_blank" rel="noreferrer">虚拟机随谈（一）：解释器，树遍历解释器，基于栈与基于寄存器，大杂烩</a></li><li>题主要注意区分优先级、结合性、</li><li><a href="https://www.zhihu.com/search?q=%E6%B1%82%E5%80%BC%E9%A1%BA%E5%BA%8F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A129426603%7D" target="_blank" rel="noreferrer">求值顺序</a>三者的区别。</li><li>这三个是不同的概念，却经常被混淆。通过AST来看就很容易理解：（假设源码是从左到右输入的）</li><li>所谓优先级，就是不同操作相邻出现时，</li><li><a href="https://www.zhihu.com/search?q=AST%E8%8A%82%E7%82%B9&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A129426603%7D" target="_blank" rel="noreferrer">AST节点</a>与根的距离的关系。优先级高的操作会更远离根，优先级低的操作会更接近根。为什么？因为整棵AST是以后序遍历求值的，显然节点离根越远就越早被求值。</li><li>所谓结合性，就是当同类操作相邻出现时，操作的先后顺序同AST节点与根的距离的关系。如果是左结合，则先出现的操作对应的AST节点比后出现的操作的节点离根更远；换句话说，先出现的节点会是后出现节点的子节点。</li><li>所谓求值顺序，就是在遍历子节点时的顺序。对二元运算对应的节点来说，先遍历</li><li><a href="https://www.zhihu.com/search?q=%E5%B7%A6%E5%AD%90%E8%8A%82%E7%82%B9&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A129426603%7D" target="_blank" rel="noreferrer">左子节点</a>再遍历右子节点就是从左到右的求值顺序，反之则是从右到左的求值顺序。</li><li>这三个概念与运算的联系都很紧密，但实际描述的是不同的关系。前两者是</li><li><a href="https://www.zhihu.com/search?q=%E8%A7%A3%E6%9E%90%E5%99%A8&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A129426603%7D" target="_blank" rel="noreferrer">解析器</a>根据语法生成AST时就已经决定好的，后者则是解释执行或者生成代码而去遍历AST时决定的。</li><li>在没有副作用的环境中，给定优先级与结合性，则无论求值顺序是怎样的都能得到同样的结果；而在有副作用的环境中，求值顺序会影响结果。</li><li>题主可以看看您的代码对应的AST长啥样：</li><li><a href="https://link.zhihu.com/?target=http%3A//esprima.org/demo/parse.html" target="_blank" rel="noreferrer">Esprima: Parser</a></li><li>，对照上面传送门所说的看看。</li><li>或者这个：</li><li><a href="https://link.zhihu.com/?target=http%3A//nhiro.org/learn_language/AST-Visualization-on-browser.html" target="_blank" rel="noreferrer">AST Visualization on browser</a></li><li>对应console.log(fn01() || fn02() &amp;&amp; fn03())，AST是：</li><li>具体到题主有疑问的那个地方，AST是这样的：<code> || / \\ fn01() &amp;&amp; / \\ fn02() fn03()</code></li><li>表达式层面上，代码的执行就是后序遍历这棵AST而已。</li><li>优先级：在相邻的两个运算符 || 与 &amp;&amp; 中，&amp;&amp; 比 || 离AST的根更远所以优先级更高</li><li>结合性：这里没有相邻的同优先级运算符所以展现不出 || 与 &amp;&amp; 的结合性，虽然它们都是左结合的</li><li>求值顺序：JavaScript的求值顺序就是从左向右的。对这棵AST来说就是在后序遍历时，每个节点的求值过程是先遍历左子树，再遍历右子树，然后对自己求值。</li><li>外加 || 与 &amp;&amp; 的短路求值语义，如果左操作数已经足以求出结果则不会对右操作数求值</li></ul></li></ul>',1)]))}const _=a(l,[["render",p]]);export{u as __pageData,_ as default};
