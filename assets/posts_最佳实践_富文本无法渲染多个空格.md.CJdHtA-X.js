import{_ as e,I as k,c as h,o as r,bh as p,J as l,a as i,j as n,w as t}from"./chunks/framework.CnSDJcCf.js";const f=JSON.parse('{"title":"富文本无法渲染多个空格","description":"","frontmatter":{},"headers":[],"relativePath":"posts/最佳实践/富文本无法渲染多个空格.md","filePath":"posts/最佳实践/富文本无法渲染多个空格.md"}'),d={name:"posts/最佳实践/富文本无法渲染多个空格.md"};function g(o,s,E,y,u,b){const a=k("font");return r(),h("div",null,[s[34]||(s[34]=p('<h1 id="富文本无法渲染多个空格" tabindex="-1">富文本无法渲染多个空格 <a class="header-anchor" href="#富文本无法渲染多个空格" aria-label="Permalink to “富文本无法渲染多个空格”">​</a></h1><h2 id="事情的起因" tabindex="-1">事情的起因 <a class="header-anchor" href="#事情的起因" aria-label="Permalink to “事情的起因”">​</a></h2><p>添加空格之后，上传给后台之后，回显的时候，没有正确的处理空格，不管多少个空格都只显示一个空格。</p><p>输入空格之前：</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/654315/1688789869845-b90b3a51-ce8b-457e-b3fc-8008b433e33f.png" alt=""></p><p>输入之后：</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/654315/1688789944441-cb02c067-63eb-49da-bf5f-89769486ab16.png" alt=""></p><h2 id="问题盘查" tabindex="-1">问题盘查 <a class="header-anchor" href="#问题盘查" aria-label="Permalink to “问题盘查”">​</a></h2><p>将显现和问题输入 chatGPT，它给了答案。辅以谷歌百度。得到下面的解释：</p>',9)),l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[0]||(s[0]=[i("浏览器会识别标签之间的空格，但会将连续的空格合并为一个空格。",-1)])),_:1,__:[0]}),s[35]||(s[35]=i("**",-1)),l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[1]||(s[1]=[i("这是因为 HTML 规范规定",-1)])),_:1,__:[1]}),s[36]||(s[36]=i("**",-1)),l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[2]||(s[2]=[i("，连续的空白字符（包括空格、制表符和换行符）在渲染时会被合并为一个空格，这样可以保证页面的呈现一致性。所以在 HTML 标签内部的连续空格会被视为一个空格，而不会影响页面的布局。但需要注意的是，标签开始和结束之间的空格不会被合并，它们会被保留。",-1)])),_:1,__:[2]}),l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[3]||(s[3]=[i("也就是说，当我们在 html 中输入下面的代码：",-1)])),_:1,__:[3]}),s[37]||(s[37]=p('<div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;This is a paragraph with multiple lines of text.&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>它在页面上面最终渲染的还是一行。只是在 with 和 multiple 之间有一个空格。</p><h2 id="解决过程" tabindex="-1">解决过程 <a class="header-anchor" href="#解决过程" aria-label="Permalink to “解决过程”">​</a></h2>',3)),l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[4]||(s[4]=[i("让浏览器能够识别出空格就好了。所以浏览器识别什么空格呢？实体' '。所以说只要将空格都替换成实体的' '就可以让浏览器正确的渲染。",-1)])),_:1,__:[4]}),l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[5]||(s[5]=[i("代码实现：",-1)])),_:1,__:[5]}),s[38]||(s[38]=p(`<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> saveEditorValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> editorValue?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s\\s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &amp;nbsp;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  localStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gasEditorValue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The data storage server succeeds. Procedure&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div>`,1)),n("p",null,[s[8]||(s[8]=i("但是这样有一个明显的问题。",-1)),n("strong",null,[l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[6]||(s[6]=[i("对字符串进行处理不是浏览器的长处",-1)])),_:1,__:[6]})]),l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[7]||(s[7]=[i("。当要处理的文本超过 100KB 的时候，浏览器会有明显的卡顿。所以我们最后能够让浏览器可以对标签内的空格进行识别。",-1)])),_:1,__:[7]})]),l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[9]||(s[9]=[i("所以说最好是能够直接渲染出标签内的空格。经过一分钟的搜索，得到出了结论，可以使用 css 的属性 white-space。翻阅 mdn 文档之后知道了它的四个属性：",-1)])),_:1,__:[9]}),s[39]||(s[39]=p(`<div class="language-css"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.my-element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  white-space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">normal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 默认值 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.preformatted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  white-space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pre</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 保留所有空白字符的可见性 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.nowrap-text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  white-space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nowrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 不换行，文本在一行上显示 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.wrap-text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  white-space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pre-wrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 保留所有空白字符的可见性，并且超出容器宽度换行 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,1)),l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[10]||(s[10]=[i("所以我们使用使用",-1)])),_:1,__:[10]}),s[40]||(s[40]=i("`",-1)),l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[11]||(s[11]=[i("pre",-1)])),_:1,__:[11]}),s[41]||(s[41]=i("`",-1)),l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[12]||(s[12]=[i("或者 ",-1)])),_:1,__:[12]}),s[42]||(s[42]=i("`",-1)),l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[13]||(s[13]=[i("pre-wrap",-1)])),_:1,__:[13]}),s[43]||(s[43]=i("`",-1)),l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[14]||(s[14]=[i("即可。",-1)])),_:1,__:[14]}),l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[15]||(s[15]=[i("问题来了，我们使用该 css 属性是可以让 v-html 渲染的节点可以实现多空格的渲染的。但是想要拿到富文本的 class 来直接穿透属性进行的方式却行不通。如下图：",-1)])),_:1,__:[15]}),s[44]||(s[44]=p(`<p><img src="https://cdn.nlark.com/yuque/0/2023/png/654315/1688791556738-d5a33495-26c0-44ce-93c2-2ef398f34f1f.png" alt=""></p><p>看来是富文本对输入进去的内容进行了处理。所以打开 tiptap 的文档，果然找到了对应配置的属性。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Editor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  parseOptions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    preserveWhitespace: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;full&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>代码中有该属性的注释，如下：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    By default, whitespace is collapsed as per HTML&#39;s rules. Pass</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    \`true\` to preserve whitespace, but normalize newlines to</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    spaces, and \`&quot;full&quot;\` to preserve whitespace entirely.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    preserveWhitespace</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;full&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>翻译的结果就是效果和<code>white-space</code>是一样的。</p><p>配置上去之后，数据初始话的时候，果然渲染出了多个空格，但是当我们使用<code>editor.value?.commands.setContent(&#39;xx xxx&#39;, false)</code>给富文本赋值的时候，空格又全部只有一个。官网站不到问题。</p><p>属性已经给了，但是配置上去了依旧不行，那是不是 tiptap 自身的 BUG 呢？所以只能去 tiptap 的 github 代码仓库的 issue 上面找寻答案。</p>`,8)),n("p",null,[s[17]||(s[17]=i("换了多个关键字搜索：'space'、'",-1)),n("strong",null,[l(a,{style:{color:"rgb(42, 43, 46)"}},{default:t(()=>s[16]||(s[16]=[i("entity",-1)])),_:1,__:[16]})]),s[18]||(s[18]=i("'、'content' 垃圾英语表述能力只能通过这样的方式来搜索了，看 Open 的，看 closed。 ",-1)),s[19]||(s[19]=n("strong",null,"这是一个漫长的过程！",-1))]),s[45]||(s[45]=p(`<p><img src="https://cdn.nlark.com/yuque/0/2023/png/654315/1688792328037-58f910c6-8f97-4210-9e0d-baf67fb8d37d.png" alt=""></p><p>还好最终在 closed 中找到了答案，链接如下<a href="https://github.com/ueberdosis/tiptap/issues/3754" target="_blank" rel="noreferrer">https://github.com/ueberdosis/tiptap/issues/3754</a></p><p>原来配置好初始之后还不够，还需要我们在 setContent 方法里面也添加上<code>preserveWhitespace</code>属性。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">editor.commands.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xxxxx, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  preserveWhitespace: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;full&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>问题得到解决。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to “总结”">​</a></h2><p><strong>ChatGTP + 官方文档 + 代码仓库的 issue = 解决</strong></p><h2 id="扩展" tabindex="-1">扩展 <a class="header-anchor" href="#扩展" aria-label="Permalink to “扩展”">​</a></h2>`,8)),n("ul",null,[n("li",null,[l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[20]||(s[20]=[i("标签内的空格在 ASCII 码中用 32 来表示。",-1)])),_:1,__:[20]})]),n("li",null,[l(a,{style:{color:"rgb(42, 49, 53)"}},{default:t(()=>s[21]||(s[21]=[i("一些常用的实体如下：",-1)])),_:1,__:[21]}),n("ul",null,[n("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:t(()=>s[22]||(s[22]=[i("<：小于号 <",-1)])),_:1,__:[22]})]),n("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:t(()=>s[23]||(s[23]=[i(">：大于号 >",-1)])),_:1,__:[23]})]),n("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:t(()=>s[24]||(s[24]=[i("&：和号 &",-1)])),_:1,__:[24]})]),n("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:t(()=>s[25]||(s[25]=[i('"：引号 "',-1)])),_:1,__:[25]})]),n("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:t(()=>s[26]||(s[26]=[i("'：单引号 '",-1)])),_:1,__:[26]})]),n("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:t(()=>s[27]||(s[27]=[i(" ：空格",-1)])),_:1,__:[27]})]),n("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:t(()=>s[28]||(s[28]=[i("©：版权符号 ",-1)])),_:1,__:[28]}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:t(()=>s[29]||(s[29]=[i("©",-1)])),_:1,__:[29]})]),n("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:t(()=>s[30]||(s[30]=[i("®：注册商标符号 ",-1)])),_:1,__:[30]}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:t(()=>s[31]||(s[31]=[i("®",-1)])),_:1,__:[31]})]),n("li",null,[l(a,{style:{color:"rgb(51, 51, 51)"}},{default:t(()=>s[32]||(s[32]=[i("™：商标符号 ",-1)])),_:1,__:[32]}),l(a,{style:{color:"rgb(51, 51, 51)"}},{default:t(()=>s[33]||(s[33]=[i("™",-1)])),_:1,__:[33]})])])])])])}const F=e(d,[["render",g]]);export{f as __pageData,F as default};
